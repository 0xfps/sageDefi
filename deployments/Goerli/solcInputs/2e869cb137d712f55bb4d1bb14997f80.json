{
  "language": "Solidity",
  "sources": {
    "contracts/sageIco.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.9;\r\nerror Balance_SAGIsNotEnough();\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract SageToken is ERC20Interface{\r\n    // First create SAGE ERC20 Token\r\n   \r\n    // Define state variables\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public override totalSupply;\r\n    address public _founder;\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    constructor(){\r\n        _founder = msg.sender;\r\n        name = \"SAGECOIN\";\r\n        symbol = \"SAG\";\r\n        decimals = 10;\r\n        totalSupply = 100000000000;\r\n        balances[_founder] = totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance){\r\n            return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address to, uint256 tokens) public override returns (bool success){\r\n        if(balances[msg.sender] < tokens){\r\n            revert Balance_SAGIsNotEnough();\r\n        }\r\n        balances[to] += tokens;\r\n        balances[_founder] -=tokens;\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public override view returns (uint256 remaining){\r\n            return allowed[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        if(balances[msg.sender] < tokens && balances[msg.sender] == 0){\r\n            revert Balance_SAGIsNotEnough();\r\n        }\r\n        allowed[msg.sender][spender] += tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        if(balances[msg.sender] < tokens && balances[msg.sender] == 0){\r\n            revert Balance_SAGIsNotEnough();\r\n        }\r\n        balances[to] += tokens;\r\n        allowed[from][msg.sender] -= tokens;\r\n        balances[from] -=tokens;\r\n\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }    \r\n}\r\n// Secondly create an ICO functionality\r\n\r\ncontract SageIco is SageToken{\r\n    // define state variable\r\n    // * accounts, ethAmount, hardcap, tokenAmount, maximumAmount, adminAddress, stateofContract, icoStartTime, icoEndTime/\r\n    enum IcoState {\r\n        NEVERSTART, START, HALT, END\r\n    }\r\n\r\n    mapping(address => uint256) private s_userBalances;\r\n    IcoState private s_icostate;\r\n    address [] private s_accounts;\r\n    uint256 private i_ethAmount;\r\n    uint256 private i_hardcap;\r\n    uint256 private s_tokenAmount;\r\n    uint256 private s_minimum;\r\n    uint256 private s_maximumAmount;\r\n    uint256 private s_raisedAmount;\r\n    uint256 private s_icoStartTime;\r\n    uint256 private s_icoEndTime;\r\n    address private s_adminAddress;\r\n    address private s_owner;\r\n    address payable private s_deposit;\r\n    \r\n    event ethAmount(uint256 indexed amount);\r\n    event tokenAmount(uint256 indexed tokens);\r\n    event ICOInvest(uint256 indexed amount, address indexed sender, uint256 indexed tokens);\r\n\r\n    constructor(address payable depositAddress){\r\n        i_ethAmount = 0.01 ether;\r\n        s_raisedAmount = 0;\r\n        i_hardcap = 200 ether;\r\n        s_minimum = 1 ether;\r\n        s_maximumAmount = 6 ether;\r\n        s_icostate = IcoState.NEVERSTART;\r\n        s_icoStartTime = block.timestamp + 86400 ;\r\n        s_icoEndTime = block.timestamp + 604800;\r\n        s_owner = msg.sender;\r\n        s_deposit = depositAddress;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == s_owner);\r\n        _;\r\n    } \r\n\r\n    function addpaymentAddress(address payable adminAddress) public onlyOwner () {\r\n        s_deposit = adminAddress;\r\n    }\r\n\r\n    function haltICO() public onlyOwner () {\r\n        s_icostate = IcoState.HALT;\r\n    }\r\n\r\n    function endICO() public onlyOwner(){\r\n        s_icostate = IcoState.END;\r\n    }\r\n\r\n    function resumeICO() public onlyOwner(){\r\n        s_icostate = IcoState.START;\r\n    }\r\n\r\n    function icoCurrentState () public view returns (IcoState){\r\n        if(block.timestamp < s_icoStartTime){\r\n            return IcoState.NEVERSTART;\r\n        }else if(block.timestamp >= s_icoStartTime && block.timestamp < s_icoEndTime ){\r\n            return IcoState.START;\r\n        }else if(s_icostate == IcoState.HALT ){\r\n            return IcoState.HALT;\r\n        }else{\r\n            return IcoState.END;\r\n        }\r\n    }\r\n    function invest(uint256 amount) payable public returns (bool){\r\n        require(amount >= s_minimum, 'Insufficient Amount');\r\n        require(s_icostate == IcoState.START, 'ICO has not start!! Contact Admin');\r\n        require(i_hardcap == 200 ether, 'ICO has ended');\r\n        require(s_userBalances[msg.sender] < s_maximumAmount, 'Exceed Maximum Amount');\r\n        \r\n        uint256 tokens = amount/i_ethAmount;\r\n        balances[msg.sender] += tokens;\r\n        balances[_founder] -=tokens;\r\n        s_deposit.transfer(amount); \r\n        emit ICOInvest(amount, msg.sender, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n    function getowner() public view returns (address){\r\n        return s_owner;\r\n    }\r\n\r\n    function getEthAmount() public view returns (uint256){\r\n        return i_ethAmount;\r\n    }\r\n\r\n    function gethardcap() public view returns (uint256){\r\n        return i_hardcap;\r\n    }\r\n\r\n    function gettokenAmount() public view returns (uint256){\r\n        return s_tokenAmount;\r\n    }\r\n    function getmaximumAmount() public view returns (uint256){\r\n        return s_maximumAmount;\r\n    }\r\n    function getadminAddress() public view returns (address){\r\n        return s_adminAddress;\r\n    }\r\n\r\n     function geticostate () public view returns (IcoState){\r\n        return  s_icostate ;\r\n     }\r\n\r\n     \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}